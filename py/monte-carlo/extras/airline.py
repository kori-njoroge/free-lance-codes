import numpy as np

def simulate_passengers(mean_arrival_rate):
    """
    Simulate the number of passengers who show up for a flight using a Poisson distribution.

    Args:
    mean_arrival_rate (float): The mean arrival rate for the Poisson distribution.

    Returns:
    int: The number of passengers who show up for the flight.
    """
    return np.random.poisson(mean_arrival_rate)

def calculate_profit(num_excess_tickets, num_passengers):
    """
    Calculate the profit generated by the airline given the number of excess tickets sold and the number of passengers who show up for the flight.

    Args:
    num_excess_tickets (int): The number of excess tickets sold.
    num_passengers (int): The number of passengers who show up for the flight.

    Returns:
    float: The profit generated by the airline.
    """
    ticket_price = 200
    overbooking_penalty = 1.25 * ticket_price
    num_paying_passengers = max(num_passengers - num_excess_tickets, 0)
    revenue = num_paying_passengers * 250
    overbooking_cost = max(num_excess_tickets - num_passengers, 0) * overbooking_penalty
    profit = revenue -overbooking_cost
    return profit

def monte_carlo_simulation(num_simulations, mean_arrival_rate, excess_tickets_min, excess_tickets_max):
    """
    Run a Monte Carlo simulation with a specified number of simulations and optimize over a range of excess tickets sold to find the number that maximizes the average profit generated.

    Args:
    num_simulations (int): The number of simulations to run.
    mean_arrival_rate (float): The mean arrival rate for the Poisson distribution.
    excess_tickets_min (int): The minimum number of excess tickets to sell.
    excess_tickets_max (int): The maximum number of excess tickets to sell.

    Returns:
    Tuple[float, int]: The average profit generated and the optimal number of excess tickets to sell.
    """
    profits = []
    excess_tickets_list = range(excess_tickets_min, excess_tickets_max + 1)
    for num_excess_tickets in excess_tickets_list:
        total_profit = 0
        for i in range(num_simulations):
            num_passengers = simulate_passengers(mean_arrival_rate)
            total_profit += calculate_profit(num_excess_tickets, num_passengers)
        avg_profit = total_profit / num_simulations
        profits.append(avg_profit)
    optimal_num_excess_tickets = excess_tickets_list[np.argmax(profits)]
    return max(profits), optimal_num_excess_tickets

def present_results(avg_profit, optimal_num_excess_tickets):
    """
    Present the results of the Monte Carlo simulation to the boss, including the optimal number of excess tickets to sell and the average profit generated.

    Args:
    avg_profit (float): The average profit generated by the airline.
    optimal_num_excess_tickets (int): The optimal number of excess tickets to sell.
    """
    print(f"Optimal number of excess tickets to sell: {optimal_num_excess_tickets}")
    print(f"Average profit generated: ${avg_profit:.2f}")


# testing the code
avg_profit, optimal_num_excess_tickets = monte_carlo_simulation(num_simulations=1000, mean_arrival_rate=170, excess_tickets_min=0, excess_tickets_max=50)
present_results(avg_profit, optimal_num_excess_tickets)
